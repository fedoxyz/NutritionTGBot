from logger import logger

from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters, ConversationHandler
from db import db, User
from sqlalchemy.future import select
from keyboards import main_kb
from utils.state_manager import set_current_state
from utils.message_utils import send_message
from utils.chat_filters import private_chat_only
from typing import Any

first_message = """
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ* üìä *–æ—Ç—Å–ª–µ–¥–∏—Ç—å –∏ —É–ª—É—á—à–∏—Ç—å —Ç–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ!*

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
üçé *–í–µ–¥—É –∑–∞–ø–∏—Å—å* —Ç–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤  
üßÆ *–°—á–∏—Ç–∞—é —Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤*: –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã  
üìà *–í—ã–≤–æ–∂—É –∏–Ω–¥–µ–∫—Å* —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è  
üìä *–ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑* –∏ —Å–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ—Ä–∑–∏–Ω–µ  
üí° *–î–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏* –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤

üöÄ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:*

1Ô∏è‚É£ *–ó–∞–≥—Ä—É–∑–∏ —á–µ–∫* –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ:  
   - üì± *–°–∫–∞—á–∞–π –∏ –æ—Ç–∫—Ä–æ–π* –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *¬´–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–æ–≤ –§–ù–°¬ª* ‚Äì [Google Play](https://play.google.com/store/apps/details?id=ru.fns.billchecker), [App Store](https://apps.apple.com/ru/app/%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D1%87%D0%B5%D0%BA%D0%BE%D0%B2-%D1%84%D0%BD%D1%81-%D1%80%D0%BE%D1%81%D1%81%D0%B8%D0%B8/id1169353005) –∏–ª–∏ [RuStore](https://www.rustore.ru/catalog/app/ru.fns.billchecker.mobile.android)  
   - üîë *–ü—Ä–æ–π–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é* (–º–æ–∂–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞)  
   - üì∑ *–°–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥* —á–µ–∫–∞ (–≤–∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞)  
   - üì§ *–ü–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è* –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö. –ù–∞–∂–º–∏:  
     ¬´–î–µ–π—Å—Ç–≤–∏—è —Å —á–µ–∫–æ–º¬ª ‚Üí ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª ‚Üí ¬´JSON¬ª ‚Üí ¬´Telegram¬ª ‚Üí –≤—ã–±–µ—Ä–∏ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

2Ô∏è‚É£ *–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*  
   - ‚úçÔ∏è *–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º*, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Ö–ª–µ–± —Ä–∂–∞–Ω–æ–π 550 –≥, —Å–º–µ—Ç–∞–Ω–∞ 20% 200 –≥¬ª  
   - üì∏ *–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é* —á–µ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–µ –±–æ—Ç—É  
   - üé§ *–ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ –≤–µ—Å–æ–º (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

3Ô∏è‚É£ *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤* –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.

ü§ñ *–Ø –∞–∫—Ç–∏–≤–Ω–æ —É—á—É—Å—å –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—Å—å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã!*  
*–ï—Å–ª–∏ —è –≥–¥–µ-—Ç–æ –æ—à–∏–±—Å—è, —Å–æ–æ–±—â–∏ –º–Ω–µ* ‚Äì —Ç–∞–∫ —Ç—ã –ø–æ–º–æ–∂–µ—à—å –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ!

‚ú® *–¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å!* –ó–∞–≥—Ä—É–∂–∞–π —Å–≤–æ–∏ —á–µ–∫–∏ –∏ —Å–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–∏–º –ø–∏—Ç–∞–Ω–∏–µ–º –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π!
"""
start_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!" # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 

@private_chat_only
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Any:
    user = update.effective_user
    if user: 
        user_id = user.id
        set_current_state(context, 0)
        async with db.session() as session:
            # Check if user already exists
            logger.debug(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            result = await session.execute(select(User).where(User.telegram_id == user.id))
            existing_user = result.scalar_one_or_none()
            
            if existing_user is None:
                logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                # User doesn't exist, create a new user
                new_user = User(telegram_id=user.id, username=user.username)
                session.add(new_user)
                text = first_message.format(username=user.username or "–¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                await session.commit()
            else:
                text = start_message

        if update.message:
            await send_message(update, context, text, reply_markup=main_kb(), parse_mode='Markdown', disable_web_page_preview=True )
        elif update.callback_query and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=main_kb()
            )
        
    return ConversationHandler.END 

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle any errors by resetting state and calling /start"""
    logger.error(f"Error occurred: {context.error}")
    
    try:
        if update and update.effective_chat:
            # Reset user data
            if context.user_data:
                context.user_data.clear()
            
            # Trigger /start command
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞..."
            )
            await start_handler(update, context)
    except Exception as e:
        logger.error(f"Error in error handler: {e}")

def setup_start_handler(application):
    application.add_handler(CommandHandler("start", start_handler))
    application.add_handler(MessageHandler(
        filters.Regex("^(–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$"),
        start_handler
    ))
    application.add_error_handler(error_handler)
    logger.debug("Start handlers added");
